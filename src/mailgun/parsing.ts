import { z } from "zod";

const messageIdRegex = /^<[^<>]+>$/;

const EmailFormDataSchema = z.object({
  // Message identification
  "Message-Id": z.string().describe("The Message-ID of the email"),
  "In-Reply-To": z
    .string()
    .describe("The Message-ID of the email this is a reply to")
    .optional(),
  References: z
    .string()
    .refine((val) => val.split(/\s+/).every((id) => messageIdRegex.test(id)), {
      message: "One or more Message-IDs are invalid",
    })
    .transform((val) => val.split(/\s+/))
    .optional()
    .describe("Space-separated list of Message-IDs that this email references"),

  // Email metadata
  Subject: z.string().describe("The subject of the email"),
  From: z.string().describe("The email address of the sender"),
  To: z.string().describe("The email address of the recipient"),
  "User-Agent": z.string().describe("The User-Agent of the email").optional(),

  // Email content
  "body-html": z.string().describe("The HTML body of the email"),
  "body-plain": z.string().describe("The plain text body of the email"),
  "stripped-html": z.string().describe("The stripped HTML body of the email"),
  "stripped-text": z
    .string()
    .describe("The stripped plain text body of the email"),
  "stripped-signature": z
    .string()
    .describe("The stripped signature of the email")
    .optional(),
  timestamp: z
    .string()
    .describe("The timestamp of the email")
    .transform((val) => parseInt(val)),
  signature: z
    .string()
    .describe("A string with hexadecimal digits generated by HMAC algorithm"),
  token: z.string().describe("A randomly generated string with a length of 50"),
});

export type MailgunEmailData = z.infer<typeof EmailFormDataSchema>;

/**
 * Parses email form data
 * @param formData The raw form data from the email webhook
 * @returns The parsed and validated email data
 * @throws ZodError if validation fails
 */
export function parseEmailFormData(formData: FormData): MailgunEmailData {
  const data: Record<string, string> = {};

  // Convert FormData to a plain object
  for (const [key, value] of formData.entries()) {
    if (typeof value === "string") {
      data[key] = value;
    }
  }

  return EmailFormDataSchema.parse(data);
}
